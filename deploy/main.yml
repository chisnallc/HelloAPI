AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Resources:
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "HelloApi"
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ../build
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Description: Lambda for API Gateway backend
      Role: !GetAtt [LambdaExecutionRole, Arn]
      MemorySize: 128
      Timeout: 600
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/aws/lambda/HelloApi"
      RetentionInDays: 30
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt [LambdaLogGroup, Arn]
                Effect: Allow
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: "./proxy-api-definition.yaml"
      StageName: "live"
      MethodSettings:
        - DataTraceEnabled: true
          LoggingLevel: "ERROR"
          ResourcePath: "/*"
          HttpMethod: "*"
      Variables:
        ServerlessExpressLambdaFunctionName: !Ref Lambda